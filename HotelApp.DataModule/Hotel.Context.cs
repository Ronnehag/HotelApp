//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HotelApp.DataModule
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HotelEntities : DbContext
    {
        public HotelEntities()
            : base("name=HotelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<Room> Rooms { get; set; }
    
        public virtual ObjectResult<Nullable<int>> CheckRoom(Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut)
        {
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckRoom", checkInParameter, checkOutParameter);
        }
    
        public virtual ObjectResult<Room> GetUnavailableRooms(Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut)
        {
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Room>("GetUnavailableRooms", checkInParameter, checkOutParameter);
        }
    
        public virtual ObjectResult<Room> GetUnavailableRooms(Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, MergeOption mergeOption)
        {
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Room>("GetUnavailableRooms", mergeOption, checkInParameter, checkOutParameter);
        }
    
        public virtual ObjectResult<Room> UnavailableRooms(Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut)
        {
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Room>("UnavailableRooms", checkInParameter, checkOutParameter);
        }
    
        public virtual ObjectResult<Room> UnavailableRooms(Nullable<System.DateTime> checkIn, Nullable<System.DateTime> checkOut, MergeOption mergeOption)
        {
            var checkInParameter = checkIn.HasValue ?
                new ObjectParameter("CheckIn", checkIn) :
                new ObjectParameter("CheckIn", typeof(System.DateTime));
    
            var checkOutParameter = checkOut.HasValue ?
                new ObjectParameter("CheckOut", checkOut) :
                new ObjectParameter("CheckOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Room>("UnavailableRooms", mergeOption, checkInParameter, checkOutParameter);
        }
    }
}
